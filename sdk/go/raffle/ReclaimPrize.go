// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package draffle

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ReclaimPrize is the `reclaimPrize` instruction.
type ReclaimPrize struct {
	PrizeIndex *uint32
	PrizeBump  *uint8
	Amount     *uint64

	// [0] = [WRITE] raffle
	//
	// [1] = [WRITE, SIGNER] creator
	//
	// [2] = [WRITE] to
	//
	// [3] = [WRITE] prize
	//
	// [4] = [] prizeMint
	//
	// [5] = [] systemProgram
	//
	// [6] = [] tokenProgram
	//
	// [7] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewReclaimPrizeInstructionBuilder creates a new `ReclaimPrize` instruction builder.
func NewReclaimPrizeInstructionBuilder() *ReclaimPrize {
	nd := &ReclaimPrize{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetPrizeIndex sets the "prizeIndex" parameter.
func (inst *ReclaimPrize) SetPrizeIndex(prizeIndex uint32) *ReclaimPrize {
	inst.PrizeIndex = &prizeIndex
	return inst
}

// SetPrizeBump sets the "prizeBump" parameter.
func (inst *ReclaimPrize) SetPrizeBump(prizeBump uint8) *ReclaimPrize {
	inst.PrizeBump = &prizeBump
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *ReclaimPrize) SetAmount(amount uint64) *ReclaimPrize {
	inst.Amount = &amount
	return inst
}

// SetRaffleAccount sets the "raffle" account.
func (inst *ReclaimPrize) SetRaffleAccount(raffle ag_solanago.PublicKey) *ReclaimPrize {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(raffle).WRITE()
	return inst
}

// GetRaffleAccount gets the "raffle" account.
func (inst *ReclaimPrize) GetRaffleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCreatorAccount sets the "creator" account.
func (inst *ReclaimPrize) SetCreatorAccount(creator ag_solanago.PublicKey) *ReclaimPrize {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(creator).WRITE().SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *ReclaimPrize) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetToAccount sets the "to" account.
func (inst *ReclaimPrize) SetToAccount(to ag_solanago.PublicKey) *ReclaimPrize {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(to).WRITE()
	return inst
}

// GetToAccount gets the "to" account.
func (inst *ReclaimPrize) GetToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPrizeAccount sets the "prize" account.
func (inst *ReclaimPrize) SetPrizeAccount(prize ag_solanago.PublicKey) *ReclaimPrize {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(prize).WRITE()
	return inst
}

// GetPrizeAccount gets the "prize" account.
func (inst *ReclaimPrize) GetPrizeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPrizeMintAccount sets the "prizeMint" account.
func (inst *ReclaimPrize) SetPrizeMintAccount(prizeMint ag_solanago.PublicKey) *ReclaimPrize {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(prizeMint)
	return inst
}

// GetPrizeMintAccount gets the "prizeMint" account.
func (inst *ReclaimPrize) GetPrizeMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ReclaimPrize) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ReclaimPrize {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ReclaimPrize) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *ReclaimPrize) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ReclaimPrize {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *ReclaimPrize) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetRentAccount sets the "rent" account.
func (inst *ReclaimPrize) SetRentAccount(rent ag_solanago.PublicKey) *ReclaimPrize {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *ReclaimPrize) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst ReclaimPrize) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ReclaimPrize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ReclaimPrize) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ReclaimPrize) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.PrizeIndex == nil {
			return errors.New("PrizeIndex parameter is not set")
		}
		if inst.PrizeBump == nil {
			return errors.New("PrizeBump parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Raffle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.To is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Prize is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PrizeMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *ReclaimPrize) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ReclaimPrize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("PrizeIndex", *inst.PrizeIndex))
						paramsBranch.Child(ag_format.Param(" PrizeBump", *inst.PrizeBump))
						paramsBranch.Child(ag_format.Param("    Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       raffle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      creator", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           to", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        prize", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    prizeMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         rent", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj ReclaimPrize) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PrizeIndex` param:
	err = encoder.Encode(obj.PrizeIndex)
	if err != nil {
		return err
	}
	// Serialize `PrizeBump` param:
	err = encoder.Encode(obj.PrizeBump)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ReclaimPrize) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PrizeIndex`:
	err = decoder.Decode(&obj.PrizeIndex)
	if err != nil {
		return err
	}
	// Deserialize `PrizeBump`:
	err = decoder.Decode(&obj.PrizeBump)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewReclaimPrizeInstruction declares a new ReclaimPrize instruction with the provided parameters and accounts.
func NewReclaimPrizeInstruction(
	// Parameters:
	prizeIndex uint32,
	prizeBump uint8,
	amount uint64,
	// Accounts:
	raffle ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	to ag_solanago.PublicKey,
	prize ag_solanago.PublicKey,
	prizeMint ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *ReclaimPrize {
	return NewReclaimPrizeInstructionBuilder().
		SetPrizeIndex(prizeIndex).
		SetPrizeBump(prizeBump).
		SetAmount(amount).
		SetRaffleAccount(raffle).
		SetCreatorAccount(creator).
		SetToAccount(to).
		SetPrizeAccount(prize).
		SetPrizeMintAccount(prizeMint).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetRentAccount(rent)
}
