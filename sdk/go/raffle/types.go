// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package draffle

import ag_binary "github.com/gagliardetto/binary"

type RaffleError ag_binary.BorshEnum

const (
	RaffleErrorMaxEntrantsTooLarge RaffleError = iota
	RaffleErrorRaffleEnded
	RaffleErrorInvalidPrizeIndex
	RaffleErrorNoPrize
	RaffleErrorInvalidCalculation
	RaffleErrorNotEnoughTicketsLeft
	RaffleErrorRaffleStillRunning
	RaffleErrorWinnersAlreadyDrawn
	RaffleErrorWinnerNotDrawn
	RaffleErrorInvalidRevealedData
	RaffleErrorTokenAccountNotOwnedByWinner
	RaffleErrorTicketHasNotWon
	RaffleErrorUnclaimedPrizes
	RaffleErrorInvalidRecentBlockhashes
)

func (value RaffleError) String() string {
	switch value {
	case RaffleErrorMaxEntrantsTooLarge:
		return "MaxEntrantsTooLarge"
	case RaffleErrorRaffleEnded:
		return "RaffleEnded"
	case RaffleErrorInvalidPrizeIndex:
		return "InvalidPrizeIndex"
	case RaffleErrorNoPrize:
		return "NoPrize"
	case RaffleErrorInvalidCalculation:
		return "InvalidCalculation"
	case RaffleErrorNotEnoughTicketsLeft:
		return "NotEnoughTicketsLeft"
	case RaffleErrorRaffleStillRunning:
		return "RaffleStillRunning"
	case RaffleErrorWinnersAlreadyDrawn:
		return "WinnersAlreadyDrawn"
	case RaffleErrorWinnerNotDrawn:
		return "WinnerNotDrawn"
	case RaffleErrorInvalidRevealedData:
		return "InvalidRevealedData"
	case RaffleErrorTokenAccountNotOwnedByWinner:
		return "TokenAccountNotOwnedByWinner"
	case RaffleErrorTicketHasNotWon:
		return "TicketHasNotWon"
	case RaffleErrorUnclaimedPrizes:
		return "UnclaimedPrizes"
	case RaffleErrorInvalidRecentBlockhashes:
		return "InvalidRecentBlockhashes"
	default:
		return ""
	}
}
