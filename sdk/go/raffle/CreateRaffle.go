// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package draffle

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateRaffle is the `createRaffle` instruction.
type CreateRaffle struct {
	EndTimestamp *int64
	TicketPrice  *uint64
	MaxEntrants  *uint32
	Name         *string
	ImageUri     *string

	// [0] = [WRITE] raffle
	//
	// [1] = [WRITE] entrants
	//
	// [2] = [WRITE, SIGNER] creator
	//
	// [3] = [WRITE] proceeds
	//
	// [4] = [] proceedsMint
	//
	// [5] = [WRITE] feeAcc
	//
	// [6] = [] systemProgram
	//
	// [7] = [] tokenProgram
	//
	// [8] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateRaffleInstructionBuilder creates a new `CreateRaffle` instruction builder.
func NewCreateRaffleInstructionBuilder() *CreateRaffle {
	nd := &CreateRaffle{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetEndTimestamp sets the "endTimestamp" parameter.
func (inst *CreateRaffle) SetEndTimestamp(endTimestamp int64) *CreateRaffle {
	inst.EndTimestamp = &endTimestamp
	return inst
}

// SetTicketPrice sets the "ticketPrice" parameter.
func (inst *CreateRaffle) SetTicketPrice(ticketPrice uint64) *CreateRaffle {
	inst.TicketPrice = &ticketPrice
	return inst
}

// SetMaxEntrants sets the "maxEntrants" parameter.
func (inst *CreateRaffle) SetMaxEntrants(maxEntrants uint32) *CreateRaffle {
	inst.MaxEntrants = &maxEntrants
	return inst
}

// SetName sets the "name" parameter.
func (inst *CreateRaffle) SetName(name string) *CreateRaffle {
	inst.Name = &name
	return inst
}

// SetImageUri sets the "imageUri" parameter.
func (inst *CreateRaffle) SetImageUri(imageUri string) *CreateRaffle {
	inst.ImageUri = &imageUri
	return inst
}

// SetRaffleAccount sets the "raffle" account.
func (inst *CreateRaffle) SetRaffleAccount(raffle ag_solanago.PublicKey) *CreateRaffle {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(raffle).WRITE()
	return inst
}

// GetRaffleAccount gets the "raffle" account.
func (inst *CreateRaffle) GetRaffleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetEntrantsAccount sets the "entrants" account.
func (inst *CreateRaffle) SetEntrantsAccount(entrants ag_solanago.PublicKey) *CreateRaffle {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(entrants).WRITE()
	return inst
}

// GetEntrantsAccount gets the "entrants" account.
func (inst *CreateRaffle) GetEntrantsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCreatorAccount sets the "creator" account.
func (inst *CreateRaffle) SetCreatorAccount(creator ag_solanago.PublicKey) *CreateRaffle {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(creator).WRITE().SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *CreateRaffle) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProceedsAccount sets the "proceeds" account.
func (inst *CreateRaffle) SetProceedsAccount(proceeds ag_solanago.PublicKey) *CreateRaffle {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(proceeds).WRITE()
	return inst
}

// GetProceedsAccount gets the "proceeds" account.
func (inst *CreateRaffle) GetProceedsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProceedsMintAccount sets the "proceedsMint" account.
func (inst *CreateRaffle) SetProceedsMintAccount(proceedsMint ag_solanago.PublicKey) *CreateRaffle {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(proceedsMint)
	return inst
}

// GetProceedsMintAccount gets the "proceedsMint" account.
func (inst *CreateRaffle) GetProceedsMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFeeAccAccount sets the "feeAcc" account.
func (inst *CreateRaffle) SetFeeAccAccount(feeAcc ag_solanago.PublicKey) *CreateRaffle {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(feeAcc).WRITE()
	return inst
}

// GetFeeAccAccount gets the "feeAcc" account.
func (inst *CreateRaffle) GetFeeAccAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateRaffle) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateRaffle {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateRaffle) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CreateRaffle) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreateRaffle {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CreateRaffle) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetRentAccount sets the "rent" account.
func (inst *CreateRaffle) SetRentAccount(rent ag_solanago.PublicKey) *CreateRaffle {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *CreateRaffle) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst CreateRaffle) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateRaffle,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateRaffle) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateRaffle) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.EndTimestamp == nil {
			return errors.New("EndTimestamp parameter is not set")
		}
		if inst.TicketPrice == nil {
			return errors.New("TicketPrice parameter is not set")
		}
		if inst.MaxEntrants == nil {
			return errors.New("MaxEntrants parameter is not set")
		}
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
		if inst.ImageUri == nil {
			return errors.New("ImageUri parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Raffle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Entrants is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Proceeds is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ProceedsMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FeeAcc is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *CreateRaffle) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateRaffle")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("EndTimestamp", *inst.EndTimestamp))
						paramsBranch.Child(ag_format.Param(" TicketPrice", *inst.TicketPrice))
						paramsBranch.Child(ag_format.Param(" MaxEntrants", *inst.MaxEntrants))
						paramsBranch.Child(ag_format.Param("        Name", *inst.Name))
						paramsBranch.Child(ag_format.Param("    ImageUri", *inst.ImageUri))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       raffle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     entrants", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      creator", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     proceeds", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" proceedsMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       feeAcc", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta(" tokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         rent", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj CreateRaffle) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EndTimestamp` param:
	err = encoder.Encode(obj.EndTimestamp)
	if err != nil {
		return err
	}
	// Serialize `TicketPrice` param:
	err = encoder.Encode(obj.TicketPrice)
	if err != nil {
		return err
	}
	// Serialize `MaxEntrants` param:
	err = encoder.Encode(obj.MaxEntrants)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `ImageUri` param:
	err = encoder.Encode(obj.ImageUri)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateRaffle) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EndTimestamp`:
	err = decoder.Decode(&obj.EndTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `TicketPrice`:
	err = decoder.Decode(&obj.TicketPrice)
	if err != nil {
		return err
	}
	// Deserialize `MaxEntrants`:
	err = decoder.Decode(&obj.MaxEntrants)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `ImageUri`:
	err = decoder.Decode(&obj.ImageUri)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateRaffleInstruction declares a new CreateRaffle instruction with the provided parameters and accounts.
func NewCreateRaffleInstruction(
	// Parameters:
	endTimestamp int64,
	ticketPrice uint64,
	maxEntrants uint32,
	name string,
	imageUri string,
	// Accounts:
	raffle ag_solanago.PublicKey,
	entrants ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	proceeds ag_solanago.PublicKey,
	proceedsMint ag_solanago.PublicKey,
	feeAcc ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *CreateRaffle {
	return NewCreateRaffleInstructionBuilder().
		SetEndTimestamp(endTimestamp).
		SetTicketPrice(ticketPrice).
		SetMaxEntrants(maxEntrants).
		SetName(name).
		SetImageUri(imageUri).
		SetRaffleAccount(raffle).
		SetEntrantsAccount(entrants).
		SetCreatorAccount(creator).
		SetProceedsAccount(proceeds).
		SetProceedsMintAccount(proceedsMint).
		SetFeeAccAccount(feeAcc).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetRentAccount(rent)
}
