// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package draffle

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CollectProceeds is the `collectProceeds` instruction.
type CollectProceeds struct {

	// [0] = [] raffle
	//
	// [1] = [WRITE] proceeds
	//
	// [2] = [SIGNER] creator
	//
	// [3] = [WRITE] creatorProceeds
	//
	// [4] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCollectProceedsInstructionBuilder creates a new `CollectProceeds` instruction builder.
func NewCollectProceedsInstructionBuilder() *CollectProceeds {
	nd := &CollectProceeds{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetRaffleAccount sets the "raffle" account.
func (inst *CollectProceeds) SetRaffleAccount(raffle ag_solanago.PublicKey) *CollectProceeds {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(raffle)
	return inst
}

// GetRaffleAccount gets the "raffle" account.
func (inst *CollectProceeds) GetRaffleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProceedsAccount sets the "proceeds" account.
func (inst *CollectProceeds) SetProceedsAccount(proceeds ag_solanago.PublicKey) *CollectProceeds {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(proceeds).WRITE()
	return inst
}

// GetProceedsAccount gets the "proceeds" account.
func (inst *CollectProceeds) GetProceedsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCreatorAccount sets the "creator" account.
func (inst *CollectProceeds) SetCreatorAccount(creator ag_solanago.PublicKey) *CollectProceeds {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(creator).SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *CollectProceeds) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetCreatorProceedsAccount sets the "creatorProceeds" account.
func (inst *CollectProceeds) SetCreatorProceedsAccount(creatorProceeds ag_solanago.PublicKey) *CollectProceeds {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(creatorProceeds).WRITE()
	return inst
}

// GetCreatorProceedsAccount gets the "creatorProceeds" account.
func (inst *CollectProceeds) GetCreatorProceedsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CollectProceeds) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CollectProceeds {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CollectProceeds) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CollectProceeds) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CollectProceeds,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CollectProceeds) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CollectProceeds) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Raffle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Proceeds is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CreatorProceeds is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *CollectProceeds) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CollectProceeds")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         raffle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       proceeds", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        creator", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("creatorProceeds", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   tokenProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CollectProceeds) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CollectProceeds) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCollectProceedsInstruction declares a new CollectProceeds instruction with the provided parameters and accounts.
func NewCollectProceedsInstruction(
	// Accounts:
	raffle ag_solanago.PublicKey,
	proceeds ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	creatorProceeds ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *CollectProceeds {
	return NewCollectProceedsInstructionBuilder().
		SetRaffleAccount(raffle).
		SetProceedsAccount(proceeds).
		SetCreatorAccount(creator).
		SetCreatorProceedsAccount(creatorProceeds).
		SetTokenProgramAccount(tokenProgram)
}
