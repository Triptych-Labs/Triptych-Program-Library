// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package swapper

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ProposeSwapRecord is the `proposeSwapRecord` instruction.
type ProposeSwapRecord struct {
	Per      *uint64
	Exchange *uint64
	Splits   *[]Split

	// [0] = [WRITE, SIGNER] oracle
	//
	// [1] = [WRITE] swapPool
	//
	// [2] = [WRITE] swap
	//
	// [3] = [WRITE] fromMint
	//
	// [4] = [WRITE] toMint
	//
	// [5] = [WRITE] swapRecorder
	//
	// [6] = [] systemProgram
	//
	// [7] = [] tokenProgram
	//
	// [8] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewProposeSwapRecordInstructionBuilder creates a new `ProposeSwapRecord` instruction builder.
func NewProposeSwapRecordInstructionBuilder() *ProposeSwapRecord {
	nd := &ProposeSwapRecord{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetPer sets the "per" parameter.
func (inst *ProposeSwapRecord) SetPer(per uint64) *ProposeSwapRecord {
	inst.Per = &per
	return inst
}

// SetExchange sets the "exchange" parameter.
func (inst *ProposeSwapRecord) SetExchange(exchange uint64) *ProposeSwapRecord {
	inst.Exchange = &exchange
	return inst
}

// SetSplits sets the "splits" parameter.
func (inst *ProposeSwapRecord) SetSplits(splits []Split) *ProposeSwapRecord {
	inst.Splits = &splits
	return inst
}

// SetOracleAccount sets the "oracle" account.
func (inst *ProposeSwapRecord) SetOracleAccount(oracle ag_solanago.PublicKey) *ProposeSwapRecord {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracle).WRITE().SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *ProposeSwapRecord) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSwapPoolAccount sets the "swapPool" account.
func (inst *ProposeSwapRecord) SetSwapPoolAccount(swapPool ag_solanago.PublicKey) *ProposeSwapRecord {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(swapPool).WRITE()
	return inst
}

// GetSwapPoolAccount gets the "swapPool" account.
func (inst *ProposeSwapRecord) GetSwapPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSwapAccount sets the "swap" account.
func (inst *ProposeSwapRecord) SetSwapAccount(swap ag_solanago.PublicKey) *ProposeSwapRecord {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(swap).WRITE()
	return inst
}

// GetSwapAccount gets the "swap" account.
func (inst *ProposeSwapRecord) GetSwapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetFromMintAccount sets the "fromMint" account.
func (inst *ProposeSwapRecord) SetFromMintAccount(fromMint ag_solanago.PublicKey) *ProposeSwapRecord {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(fromMint).WRITE()
	return inst
}

// GetFromMintAccount gets the "fromMint" account.
func (inst *ProposeSwapRecord) GetFromMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetToMintAccount sets the "toMint" account.
func (inst *ProposeSwapRecord) SetToMintAccount(toMint ag_solanago.PublicKey) *ProposeSwapRecord {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(toMint).WRITE()
	return inst
}

// GetToMintAccount gets the "toMint" account.
func (inst *ProposeSwapRecord) GetToMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSwapRecorderAccount sets the "swapRecorder" account.
func (inst *ProposeSwapRecord) SetSwapRecorderAccount(swapRecorder ag_solanago.PublicKey) *ProposeSwapRecord {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(swapRecorder).WRITE()
	return inst
}

// GetSwapRecorderAccount gets the "swapRecorder" account.
func (inst *ProposeSwapRecord) GetSwapRecorderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ProposeSwapRecord) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ProposeSwapRecord {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ProposeSwapRecord) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *ProposeSwapRecord) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ProposeSwapRecord {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *ProposeSwapRecord) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetRentAccount sets the "rent" account.
func (inst *ProposeSwapRecord) SetRentAccount(rent ag_solanago.PublicKey) *ProposeSwapRecord {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *ProposeSwapRecord) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst ProposeSwapRecord) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ProposeSwapRecord,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ProposeSwapRecord) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ProposeSwapRecord) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Per == nil {
			return errors.New("Per parameter is not set")
		}
		if inst.Exchange == nil {
			return errors.New("Exchange parameter is not set")
		}
		if inst.Splits == nil {
			return errors.New("Splits parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SwapPool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Swap is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.FromMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ToMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SwapRecorder is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *ProposeSwapRecord) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ProposeSwapRecord")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("     Per", *inst.Per))
						paramsBranch.Child(ag_format.Param("Exchange", *inst.Exchange))
						paramsBranch.Child(ag_format.Param("  Splits", *inst.Splits))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       oracle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     swapPool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         swap", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     fromMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       toMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" swapRecorder", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta(" tokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         rent", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj ProposeSwapRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Per` param:
	err = encoder.Encode(obj.Per)
	if err != nil {
		return err
	}
	// Serialize `Exchange` param:
	err = encoder.Encode(obj.Exchange)
	if err != nil {
		return err
	}
	// Serialize `Splits` param:
	err = encoder.Encode(obj.Splits)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ProposeSwapRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Per`:
	err = decoder.Decode(&obj.Per)
	if err != nil {
		return err
	}
	// Deserialize `Exchange`:
	err = decoder.Decode(&obj.Exchange)
	if err != nil {
		return err
	}
	// Deserialize `Splits`:
	err = decoder.Decode(&obj.Splits)
	if err != nil {
		return err
	}
	return nil
}

// NewProposeSwapRecordInstruction declares a new ProposeSwapRecord instruction with the provided parameters and accounts.
func NewProposeSwapRecordInstruction(
	// Parameters:
	per uint64,
	exchange uint64,
	splits []Split,
	// Accounts:
	oracle ag_solanago.PublicKey,
	swapPool ag_solanago.PublicKey,
	swap ag_solanago.PublicKey,
	fromMint ag_solanago.PublicKey,
	toMint ag_solanago.PublicKey,
	swapRecorder ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *ProposeSwapRecord {
	return NewProposeSwapRecordInstructionBuilder().
		SetPer(per).
		SetExchange(exchange).
		SetSplits(splits).
		SetOracleAccount(oracle).
		SetSwapPoolAccount(swapPool).
		SetSwapAccount(swap).
		SetFromMintAccount(fromMint).
		SetToMintAccount(toMint).
		SetSwapRecorderAccount(swapRecorder).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetRentAccount(rent)
}
