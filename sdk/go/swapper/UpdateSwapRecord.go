// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package swapper

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateSwapRecord is the `updateSwapRecord` instruction.
type UpdateSwapRecord struct {
	Enabled  *bool
	Per      *uint64
	Exchange *uint64
	Splits   *[]Split

	// [0] = [WRITE, SIGNER] oracle
	//
	// [1] = [WRITE] swap
	//
	// [2] = [WRITE] swapRecorder
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateSwapRecordInstructionBuilder creates a new `UpdateSwapRecord` instruction builder.
func NewUpdateSwapRecordInstructionBuilder() *UpdateSwapRecord {
	nd := &UpdateSwapRecord{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetEnabled sets the "enabled" parameter.
func (inst *UpdateSwapRecord) SetEnabled(enabled bool) *UpdateSwapRecord {
	inst.Enabled = &enabled
	return inst
}

// SetPer sets the "per" parameter.
func (inst *UpdateSwapRecord) SetPer(per uint64) *UpdateSwapRecord {
	inst.Per = &per
	return inst
}

// SetExchange sets the "exchange" parameter.
func (inst *UpdateSwapRecord) SetExchange(exchange uint64) *UpdateSwapRecord {
	inst.Exchange = &exchange
	return inst
}

// SetSplits sets the "splits" parameter.
func (inst *UpdateSwapRecord) SetSplits(splits []Split) *UpdateSwapRecord {
	inst.Splits = &splits
	return inst
}

// SetOracleAccount sets the "oracle" account.
func (inst *UpdateSwapRecord) SetOracleAccount(oracle ag_solanago.PublicKey) *UpdateSwapRecord {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracle).WRITE().SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *UpdateSwapRecord) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSwapAccount sets the "swap" account.
func (inst *UpdateSwapRecord) SetSwapAccount(swap ag_solanago.PublicKey) *UpdateSwapRecord {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(swap).WRITE()
	return inst
}

// GetSwapAccount gets the "swap" account.
func (inst *UpdateSwapRecord) GetSwapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSwapRecorderAccount sets the "swapRecorder" account.
func (inst *UpdateSwapRecord) SetSwapRecorderAccount(swapRecorder ag_solanago.PublicKey) *UpdateSwapRecord {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(swapRecorder).WRITE()
	return inst
}

// GetSwapRecorderAccount gets the "swapRecorder" account.
func (inst *UpdateSwapRecord) GetSwapRecorderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *UpdateSwapRecord) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *UpdateSwapRecord {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *UpdateSwapRecord) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst UpdateSwapRecord) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateSwapRecord,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateSwapRecord) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateSwapRecord) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Enabled == nil {
			return errors.New("Enabled parameter is not set")
		}
		if inst.Per == nil {
			return errors.New("Per parameter is not set")
		}
		if inst.Exchange == nil {
			return errors.New("Exchange parameter is not set")
		}
		if inst.Splits == nil {
			return errors.New("Splits parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Swap is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SwapRecorder is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *UpdateSwapRecord) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateSwapRecord")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" Enabled", *inst.Enabled))
						paramsBranch.Child(ag_format.Param("     Per", *inst.Per))
						paramsBranch.Child(ag_format.Param("Exchange", *inst.Exchange))
						paramsBranch.Child(ag_format.Param("  Splits", *inst.Splits))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       oracle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         swap", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" swapRecorder", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj UpdateSwapRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	// Serialize `Per` param:
	err = encoder.Encode(obj.Per)
	if err != nil {
		return err
	}
	// Serialize `Exchange` param:
	err = encoder.Encode(obj.Exchange)
	if err != nil {
		return err
	}
	// Serialize `Splits` param:
	err = encoder.Encode(obj.Splits)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateSwapRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	// Deserialize `Per`:
	err = decoder.Decode(&obj.Per)
	if err != nil {
		return err
	}
	// Deserialize `Exchange`:
	err = decoder.Decode(&obj.Exchange)
	if err != nil {
		return err
	}
	// Deserialize `Splits`:
	err = decoder.Decode(&obj.Splits)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateSwapRecordInstruction declares a new UpdateSwapRecord instruction with the provided parameters and accounts.
func NewUpdateSwapRecordInstruction(
	// Parameters:
	enabled bool,
	per uint64,
	exchange uint64,
	splits []Split,
	// Accounts:
	oracle ag_solanago.PublicKey,
	swap ag_solanago.PublicKey,
	swapRecorder ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *UpdateSwapRecord {
	return NewUpdateSwapRecordInstructionBuilder().
		SetEnabled(enabled).
		SetPer(per).
		SetExchange(exchange).
		SetSplits(splits).
		SetOracleAccount(oracle).
		SetSwapAccount(swap).
		SetSwapRecorderAccount(swapRecorder).
		SetSystemProgramAccount(systemProgram)
}
