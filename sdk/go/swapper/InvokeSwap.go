// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package swapper

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InvokeSwap is the `invokeSwap` instruction.
type InvokeSwap struct {
	SwapBump         *uint8
	SwapIndex        *uint64
	SwapRecorderBump *uint8
	Amount           *uint64

	// [0] = [] oracle
	//
	// [1] = [WRITE] swap
	//
	// [2] = [WRITE] swapPool
	//
	// [3] = [WRITE] swapRecorder
	//
	// [4] = [WRITE] fromMint
	//
	// [5] = [WRITE] fromTokenAccount
	//
	// [6] = [WRITE] toMint
	//
	// [7] = [WRITE, SIGNER] initializer
	//
	// [8] = [WRITE] toTokenAccount
	//
	// [9] = [] systemProgram
	//
	// [10] = [] tokenProgram
	//
	// [11] = [] rent
	//
	// [12] = [] associatedTokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInvokeSwapInstructionBuilder creates a new `InvokeSwap` instruction builder.
func NewInvokeSwapInstructionBuilder() *InvokeSwap {
	nd := &InvokeSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetSwapBump sets the "swapBump" parameter.
func (inst *InvokeSwap) SetSwapBump(swapBump uint8) *InvokeSwap {
	inst.SwapBump = &swapBump
	return inst
}

// SetSwapIndex sets the "swapIndex" parameter.
func (inst *InvokeSwap) SetSwapIndex(swapIndex uint64) *InvokeSwap {
	inst.SwapIndex = &swapIndex
	return inst
}

// SetSwapRecorderBump sets the "swapRecorderBump" parameter.
func (inst *InvokeSwap) SetSwapRecorderBump(swapRecorderBump uint8) *InvokeSwap {
	inst.SwapRecorderBump = &swapRecorderBump
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *InvokeSwap) SetAmount(amount uint64) *InvokeSwap {
	inst.Amount = &amount
	return inst
}

// SetOracleAccount sets the "oracle" account.
func (inst *InvokeSwap) SetOracleAccount(oracle ag_solanago.PublicKey) *InvokeSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracle)
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *InvokeSwap) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSwapAccount sets the "swap" account.
func (inst *InvokeSwap) SetSwapAccount(swap ag_solanago.PublicKey) *InvokeSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(swap).WRITE()
	return inst
}

// GetSwapAccount gets the "swap" account.
func (inst *InvokeSwap) GetSwapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSwapPoolAccount sets the "swapPool" account.
func (inst *InvokeSwap) SetSwapPoolAccount(swapPool ag_solanago.PublicKey) *InvokeSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(swapPool).WRITE()
	return inst
}

// GetSwapPoolAccount gets the "swapPool" account.
func (inst *InvokeSwap) GetSwapPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSwapRecorderAccount sets the "swapRecorder" account.
func (inst *InvokeSwap) SetSwapRecorderAccount(swapRecorder ag_solanago.PublicKey) *InvokeSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(swapRecorder).WRITE()
	return inst
}

// GetSwapRecorderAccount gets the "swapRecorder" account.
func (inst *InvokeSwap) GetSwapRecorderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetFromMintAccount sets the "fromMint" account.
func (inst *InvokeSwap) SetFromMintAccount(fromMint ag_solanago.PublicKey) *InvokeSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(fromMint).WRITE()
	return inst
}

// GetFromMintAccount gets the "fromMint" account.
func (inst *InvokeSwap) GetFromMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFromTokenAccountAccount sets the "fromTokenAccount" account.
func (inst *InvokeSwap) SetFromTokenAccountAccount(fromTokenAccount ag_solanago.PublicKey) *InvokeSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(fromTokenAccount).WRITE()
	return inst
}

// GetFromTokenAccountAccount gets the "fromTokenAccount" account.
func (inst *InvokeSwap) GetFromTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetToMintAccount sets the "toMint" account.
func (inst *InvokeSwap) SetToMintAccount(toMint ag_solanago.PublicKey) *InvokeSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(toMint).WRITE()
	return inst
}

// GetToMintAccount gets the "toMint" account.
func (inst *InvokeSwap) GetToMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetInitializerAccount sets the "initializer" account.
func (inst *InvokeSwap) SetInitializerAccount(initializer ag_solanago.PublicKey) *InvokeSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(initializer).WRITE().SIGNER()
	return inst
}

// GetInitializerAccount gets the "initializer" account.
func (inst *InvokeSwap) GetInitializerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetToTokenAccountAccount sets the "toTokenAccount" account.
func (inst *InvokeSwap) SetToTokenAccountAccount(toTokenAccount ag_solanago.PublicKey) *InvokeSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(toTokenAccount).WRITE()
	return inst
}

// GetToTokenAccountAccount gets the "toTokenAccount" account.
func (inst *InvokeSwap) GetToTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InvokeSwap) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InvokeSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InvokeSwap) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *InvokeSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InvokeSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *InvokeSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetRentAccount sets the "rent" account.
func (inst *InvokeSwap) SetRentAccount(rent ag_solanago.PublicKey) *InvokeSwap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InvokeSwap) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *InvokeSwap) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *InvokeSwap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *InvokeSwap) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst InvokeSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InvokeSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InvokeSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InvokeSwap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.SwapBump == nil {
			return errors.New("SwapBump parameter is not set")
		}
		if inst.SwapIndex == nil {
			return errors.New("SwapIndex parameter is not set")
		}
		if inst.SwapRecorderBump == nil {
			return errors.New("SwapRecorderBump parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Swap is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SwapPool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SwapRecorder is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.FromMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FromTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ToMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Initializer is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.ToTokenAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
	}
	return nil
}

func (inst *InvokeSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InvokeSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        SwapBump", *inst.SwapBump))
						paramsBranch.Child(ag_format.Param("       SwapIndex", *inst.SwapIndex))
						paramsBranch.Child(ag_format.Param("SwapRecorderBump", *inst.SwapRecorderBump))
						paramsBranch.Child(ag_format.Param("          Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                oracle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                  swap", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("              swapPool", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          swapRecorder", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("              fromMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             fromToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                toMint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           initializer", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("               toToken", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj InvokeSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SwapBump` param:
	err = encoder.Encode(obj.SwapBump)
	if err != nil {
		return err
	}
	// Serialize `SwapIndex` param:
	err = encoder.Encode(obj.SwapIndex)
	if err != nil {
		return err
	}
	// Serialize `SwapRecorderBump` param:
	err = encoder.Encode(obj.SwapRecorderBump)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InvokeSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SwapBump`:
	err = decoder.Decode(&obj.SwapBump)
	if err != nil {
		return err
	}
	// Deserialize `SwapIndex`:
	err = decoder.Decode(&obj.SwapIndex)
	if err != nil {
		return err
	}
	// Deserialize `SwapRecorderBump`:
	err = decoder.Decode(&obj.SwapRecorderBump)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewInvokeSwapInstruction declares a new InvokeSwap instruction with the provided parameters and accounts.
func NewInvokeSwapInstruction(
	// Parameters:
	swapBump uint8,
	swapIndex uint64,
	swapRecorderBump uint8,
	amount uint64,
	// Accounts:
	oracle ag_solanago.PublicKey,
	swap ag_solanago.PublicKey,
	swapPool ag_solanago.PublicKey,
	swapRecorder ag_solanago.PublicKey,
	fromMint ag_solanago.PublicKey,
	fromTokenAccount ag_solanago.PublicKey,
	toMint ag_solanago.PublicKey,
	initializer ag_solanago.PublicKey,
	toTokenAccount ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey) *InvokeSwap {
	return NewInvokeSwapInstructionBuilder().
		SetSwapBump(swapBump).
		SetSwapIndex(swapIndex).
		SetSwapRecorderBump(swapRecorderBump).
		SetAmount(amount).
		SetOracleAccount(oracle).
		SetSwapAccount(swap).
		SetSwapPoolAccount(swapPool).
		SetSwapRecorderAccount(swapRecorder).
		SetFromMintAccount(fromMint).
		SetFromTokenAccountAccount(fromTokenAccount).
		SetToMintAccount(toMint).
		SetInitializerAccount(initializer).
		SetToTokenAccountAccount(toTokenAccount).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetRentAccount(rent).
		SetAssociatedTokenProgramAccount(associatedTokenProgram)
}
