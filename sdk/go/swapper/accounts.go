// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package swapper

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type SwapRecorder struct {
	Proposals uint64
}

var SwapRecorderDiscriminator = [8]byte{116, 37, 233, 84, 56, 251, 241, 252}

func (obj SwapRecorder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SwapRecorderDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Proposals` param:
	err = encoder.Encode(obj.Proposals)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapRecorder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SwapRecorderDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[116 37 233 84 56 251 241 252]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Proposals`:
	err = decoder.Decode(&obj.Proposals)
	if err != nil {
		return err
	}
	return nil
}

type SwapProposal struct {
	Enabled      bool
	Swaps        uint64
	Swapped      uint64
	Index        uint64
	Per          uint64
	Exchange     uint64
	MintDecimals uint8
	Oracle       ag_solanago.PublicKey
	FromMint     ag_solanago.PublicKey
	ToMint       ag_solanago.PublicKey
	Pool         ag_solanago.PublicKey
	Splits       []Split
}

var SwapProposalDiscriminator = [8]byte{164, 33, 146, 4, 81, 36, 53, 48}

func (obj SwapProposal) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SwapProposalDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	// Serialize `Swaps` param:
	err = encoder.Encode(obj.Swaps)
	if err != nil {
		return err
	}
	// Serialize `Swapped` param:
	err = encoder.Encode(obj.Swapped)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Per` param:
	err = encoder.Encode(obj.Per)
	if err != nil {
		return err
	}
	// Serialize `Exchange` param:
	err = encoder.Encode(obj.Exchange)
	if err != nil {
		return err
	}
	// Serialize `MintDecimals` param:
	err = encoder.Encode(obj.MintDecimals)
	if err != nil {
		return err
	}
	// Serialize `Oracle` param:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return err
	}
	// Serialize `FromMint` param:
	err = encoder.Encode(obj.FromMint)
	if err != nil {
		return err
	}
	// Serialize `ToMint` param:
	err = encoder.Encode(obj.ToMint)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Splits` param:
	err = encoder.Encode(obj.Splits)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapProposal) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SwapProposalDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[164 33 146 4 81 36 53 48]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	// Deserialize `Swaps`:
	err = decoder.Decode(&obj.Swaps)
	if err != nil {
		return err
	}
	// Deserialize `Swapped`:
	err = decoder.Decode(&obj.Swapped)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Per`:
	err = decoder.Decode(&obj.Per)
	if err != nil {
		return err
	}
	// Deserialize `Exchange`:
	err = decoder.Decode(&obj.Exchange)
	if err != nil {
		return err
	}
	// Deserialize `MintDecimals`:
	err = decoder.Decode(&obj.MintDecimals)
	if err != nil {
		return err
	}
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return err
	}
	// Deserialize `FromMint`:
	err = decoder.Decode(&obj.FromMint)
	if err != nil {
		return err
	}
	// Deserialize `ToMint`:
	err = decoder.Decode(&obj.ToMint)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Splits`:
	err = decoder.Decode(&obj.Splits)
	if err != nil {
		return err
	}
	return nil
}
