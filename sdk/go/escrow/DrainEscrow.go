// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package escrow

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DrainEscrow is the `drainEscrow` instruction.
type DrainEscrow struct {
	EscrowBump *uint8
	Amount     *uint64

	// [0] = [WRITE, SIGNER] initializer
	//
	// [1] = [WRITE, SIGNER] collector
	//
	// [2] = [WRITE] escrow
	//
	// [3] = [] callerProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDrainEscrowInstructionBuilder creates a new `DrainEscrow` instruction builder.
func NewDrainEscrowInstructionBuilder() *DrainEscrow {
	nd := &DrainEscrow{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetEscrowBump sets the "escrowBump" parameter.
func (inst *DrainEscrow) SetEscrowBump(escrowBump uint8) *DrainEscrow {
	inst.EscrowBump = &escrowBump
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *DrainEscrow) SetAmount(amount uint64) *DrainEscrow {
	inst.Amount = &amount
	return inst
}

// SetInitializerAccount sets the "initializer" account.
func (inst *DrainEscrow) SetInitializerAccount(initializer ag_solanago.PublicKey) *DrainEscrow {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(initializer).WRITE().SIGNER()
	return inst
}

// GetInitializerAccount gets the "initializer" account.
func (inst *DrainEscrow) GetInitializerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCollectorAccount sets the "collector" account.
func (inst *DrainEscrow) SetCollectorAccount(collector ag_solanago.PublicKey) *DrainEscrow {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(collector).WRITE().SIGNER()
	return inst
}

// GetCollectorAccount gets the "collector" account.
func (inst *DrainEscrow) GetCollectorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEscrowAccount sets the "escrow" account.
func (inst *DrainEscrow) SetEscrowAccount(escrow ag_solanago.PublicKey) *DrainEscrow {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *DrainEscrow) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetCallerProgramAccount sets the "callerProgram" account.
func (inst *DrainEscrow) SetCallerProgramAccount(callerProgram ag_solanago.PublicKey) *DrainEscrow {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(callerProgram)
	return inst
}

// GetCallerProgramAccount gets the "callerProgram" account.
func (inst *DrainEscrow) GetCallerProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst DrainEscrow) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DrainEscrow,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DrainEscrow) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DrainEscrow) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.EscrowBump == nil {
			return errors.New("EscrowBump parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Initializer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Collector is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CallerProgram is not set")
		}
	}
	return nil
}

func (inst *DrainEscrow) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DrainEscrow")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("EscrowBump", *inst.EscrowBump))
						paramsBranch.Child(ag_format.Param("    Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  initializer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    collector", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       escrow", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("callerProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj DrainEscrow) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EscrowBump` param:
	err = encoder.Encode(obj.EscrowBump)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DrainEscrow) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EscrowBump`:
	err = decoder.Decode(&obj.EscrowBump)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewDrainEscrowInstruction declares a new DrainEscrow instruction with the provided parameters and accounts.
func NewDrainEscrowInstruction(
	// Parameters:
	escrowBump uint8,
	amount uint64,
	// Accounts:
	initializer ag_solanago.PublicKey,
	collector ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	callerProgram ag_solanago.PublicKey) *DrainEscrow {
	return NewDrainEscrowInstructionBuilder().
		SetEscrowBump(escrowBump).
		SetAmount(amount).
		SetInitializerAccount(initializer).
		SetCollectorAccount(collector).
		SetEscrowAccount(escrow).
		SetCallerProgramAccount(callerProgram)
}
