// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package escrow

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InstallEscrow is the `installEscrow` instruction.
type InstallEscrow struct {
	EscrowBump *uint8
	Amount     *uint64

	// [0] = [WRITE, SIGNER] initializer
	//
	// [1] = [WRITE, SIGNER] installer
	//
	// [2] = [WRITE] escrow
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInstallEscrowInstructionBuilder creates a new `InstallEscrow` instruction builder.
func NewInstallEscrowInstructionBuilder() *InstallEscrow {
	nd := &InstallEscrow{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetEscrowBump sets the "escrowBump" parameter.
func (inst *InstallEscrow) SetEscrowBump(escrowBump uint8) *InstallEscrow {
	inst.EscrowBump = &escrowBump
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *InstallEscrow) SetAmount(amount uint64) *InstallEscrow {
	inst.Amount = &amount
	return inst
}

// SetInitializerAccount sets the "initializer" account.
func (inst *InstallEscrow) SetInitializerAccount(initializer ag_solanago.PublicKey) *InstallEscrow {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(initializer).WRITE().SIGNER()
	return inst
}

// GetInitializerAccount gets the "initializer" account.
func (inst *InstallEscrow) GetInitializerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetInstallerAccount sets the "installer" account.
func (inst *InstallEscrow) SetInstallerAccount(installer ag_solanago.PublicKey) *InstallEscrow {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(installer).WRITE().SIGNER()
	return inst
}

// GetInstallerAccount gets the "installer" account.
func (inst *InstallEscrow) GetInstallerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEscrowAccount sets the "escrow" account.
func (inst *InstallEscrow) SetEscrowAccount(escrow ag_solanago.PublicKey) *InstallEscrow {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *InstallEscrow) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst InstallEscrow) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InstallEscrow,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InstallEscrow) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InstallEscrow) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.EscrowBump == nil {
			return errors.New("EscrowBump parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Initializer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Installer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Escrow is not set")
		}
	}
	return nil
}

func (inst *InstallEscrow) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InstallEscrow")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("EscrowBump", *inst.EscrowBump))
						paramsBranch.Child(ag_format.Param("    Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("initializer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  installer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     escrow", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj InstallEscrow) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EscrowBump` param:
	err = encoder.Encode(obj.EscrowBump)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InstallEscrow) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EscrowBump`:
	err = decoder.Decode(&obj.EscrowBump)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewInstallEscrowInstruction declares a new InstallEscrow instruction with the provided parameters and accounts.
func NewInstallEscrowInstruction(
	// Parameters:
	escrowBump uint8,
	amount uint64,
	// Accounts:
	initializer ag_solanago.PublicKey,
	installer ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey) *InstallEscrow {
	return NewInstallEscrowInstructionBuilder().
		SetEscrowBump(escrowBump).
		SetAmount(amount).
		SetInitializerAccount(initializer).
		SetInstallerAccount(installer).
		SetEscrowAccount(escrow)
}
