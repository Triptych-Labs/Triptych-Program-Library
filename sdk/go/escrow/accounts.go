// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package escrow

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type House struct {
	Oracle    ag_solanago.PublicKey
	PayedOut  uint64
	Collected uint64
}

var HouseDiscriminator = [8]byte{21, 145, 94, 109, 254, 199, 210, 151}

func (obj House) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(HouseDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Oracle` param:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return err
	}
	// Serialize `PayedOut` param:
	err = encoder.Encode(obj.PayedOut)
	if err != nil {
		return err
	}
	// Serialize `Collected` param:
	err = encoder.Encode(obj.Collected)
	if err != nil {
		return err
	}
	return nil
}

func (obj *House) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(HouseDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[21 145 94 109 254 199 210 151]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return err
	}
	// Deserialize `PayedOut`:
	err = decoder.Decode(&obj.PayedOut)
	if err != nil {
		return err
	}
	// Deserialize `Collected`:
	err = decoder.Decode(&obj.Collected)
	if err != nil {
		return err
	}
	return nil
}

type Flip struct {
	Initialized *bool `bin:"optional"`
	Oracle      ag_solanago.PublicKey
	DailyEpoch  uint64
	Heads       [3]uint64
	Tails       [3]uint64
}

var FlipDiscriminator = [8]byte{13, 33, 94, 130, 154, 238, 111, 35}

func (obj Flip) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FlipDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Initialized` param (optional):
	{
		if obj.Initialized == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Initialized)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Oracle` param:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return err
	}
	// Serialize `DailyEpoch` param:
	err = encoder.Encode(obj.DailyEpoch)
	if err != nil {
		return err
	}
	// Serialize `Heads` param:
	err = encoder.Encode(obj.Heads)
	if err != nil {
		return err
	}
	// Serialize `Tails` param:
	err = encoder.Encode(obj.Tails)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Flip) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FlipDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[13 33 94 130 154 238 111 35]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Initialized` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Initialized)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return err
	}
	// Deserialize `DailyEpoch`:
	err = decoder.Decode(&obj.DailyEpoch)
	if err != nil {
		return err
	}
	// Deserialize `Heads`:
	err = decoder.Decode(&obj.Heads)
	if err != nil {
		return err
	}
	// Deserialize `Tails`:
	err = decoder.Decode(&obj.Tails)
	if err != nil {
		return err
	}
	return nil
}

type Escrow struct {
	Initializer      ag_solanago.PublicKey
	AvailableBalance uint64
}

var EscrowDiscriminator = [8]byte{31, 213, 123, 187, 186, 22, 218, 155}

func (obj Escrow) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EscrowDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Initializer` param:
	err = encoder.Encode(obj.Initializer)
	if err != nil {
		return err
	}
	// Serialize `AvailableBalance` param:
	err = encoder.Encode(obj.AvailableBalance)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Escrow) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EscrowDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[31 213 123 187 186 22 218 155]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Initializer`:
	err = decoder.Decode(&obj.Initializer)
	if err != nil {
		return err
	}
	// Deserialize `AvailableBalance`:
	err = decoder.Decode(&obj.AvailableBalance)
	if err != nil {
		return err
	}
	return nil
}
