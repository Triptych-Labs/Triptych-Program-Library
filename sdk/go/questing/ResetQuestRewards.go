// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package questing

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ResetQuestRewards is the `resetQuestRewards` instruction.
type ResetQuestRewards struct {
	QuestIndex *uint64
	QuestBump  *uint8

	// [0] = [WRITE, SIGNER] oracle
	//
	// [1] = [WRITE] quest
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewResetQuestRewardsInstructionBuilder creates a new `ResetQuestRewards` instruction builder.
func NewResetQuestRewardsInstructionBuilder() *ResetQuestRewards {
	nd := &ResetQuestRewards{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetQuestIndex sets the "questIndex" parameter.
func (inst *ResetQuestRewards) SetQuestIndex(questIndex uint64) *ResetQuestRewards {
	inst.QuestIndex = &questIndex
	return inst
}

// SetQuestBump sets the "questBump" parameter.
func (inst *ResetQuestRewards) SetQuestBump(questBump uint8) *ResetQuestRewards {
	inst.QuestBump = &questBump
	return inst
}

// SetOracleAccount sets the "oracle" account.
func (inst *ResetQuestRewards) SetOracleAccount(oracle ag_solanago.PublicKey) *ResetQuestRewards {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracle).WRITE().SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *ResetQuestRewards) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetQuestAccount sets the "quest" account.
func (inst *ResetQuestRewards) SetQuestAccount(quest ag_solanago.PublicKey) *ResetQuestRewards {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(quest).WRITE()
	return inst
}

// GetQuestAccount gets the "quest" account.
func (inst *ResetQuestRewards) GetQuestAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst ResetQuestRewards) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ResetQuestRewards,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ResetQuestRewards) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ResetQuestRewards) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.QuestIndex == nil {
			return errors.New("QuestIndex parameter is not set")
		}
		if inst.QuestBump == nil {
			return errors.New("QuestBump parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Quest is not set")
		}
	}
	return nil
}

func (inst *ResetQuestRewards) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ResetQuestRewards")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("QuestIndex", *inst.QuestIndex))
						paramsBranch.Child(ag_format.Param(" QuestBump", *inst.QuestBump))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("oracle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" quest", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj ResetQuestRewards) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `QuestIndex` param:
	err = encoder.Encode(obj.QuestIndex)
	if err != nil {
		return err
	}
	// Serialize `QuestBump` param:
	err = encoder.Encode(obj.QuestBump)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ResetQuestRewards) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `QuestIndex`:
	err = decoder.Decode(&obj.QuestIndex)
	if err != nil {
		return err
	}
	// Deserialize `QuestBump`:
	err = decoder.Decode(&obj.QuestBump)
	if err != nil {
		return err
	}
	return nil
}

// NewResetQuestRewardsInstruction declares a new ResetQuestRewards instruction with the provided parameters and accounts.
func NewResetQuestRewardsInstruction(
	// Parameters:
	questIndex uint64,
	questBump uint8,
	// Accounts:
	oracle ag_solanago.PublicKey,
	quest ag_solanago.PublicKey) *ResetQuestRewards {
	return NewResetQuestRewardsInstructionBuilder().
		SetQuestIndex(questIndex).
		SetQuestBump(questBump).
		SetOracleAccount(oracle).
		SetQuestAccount(quest)
}
