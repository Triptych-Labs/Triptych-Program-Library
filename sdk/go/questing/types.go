// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package questing

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Reward struct {
	MintAddress ag_solanago.PublicKey
	Threshold   uint8
	Amount      uint64
}

func (obj Reward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MintAddress` param:
	err = encoder.Encode(obj.MintAddress)
	if err != nil {
		return err
	}
	// Serialize `Threshold` param:
	err = encoder.Encode(obj.Threshold)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Reward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MintAddress`:
	err = decoder.Decode(&obj.MintAddress)
	if err != nil {
		return err
	}
	// Deserialize `Threshold`:
	err = decoder.Decode(&obj.Threshold)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type Tender struct {
	MintAddress ag_solanago.PublicKey
	Amount      uint64
}

func (obj Tender) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MintAddress` param:
	err = encoder.Encode(obj.MintAddress)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Tender) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MintAddress`:
	err = decoder.Decode(&obj.MintAddress)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type Split struct {
	TokenAddress ag_solanago.PublicKey
	OpCode       uint8
	Share        uint8
}

func (obj Split) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenAddress` param:
	err = encoder.Encode(obj.TokenAddress)
	if err != nil {
		return err
	}
	// Serialize `OpCode` param:
	err = encoder.Encode(obj.OpCode)
	if err != nil {
		return err
	}
	// Serialize `Share` param:
	err = encoder.Encode(obj.Share)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Split) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenAddress`:
	err = decoder.Decode(&obj.TokenAddress)
	if err != nil {
		return err
	}
	// Deserialize `OpCode`:
	err = decoder.Decode(&obj.OpCode)
	if err != nil {
		return err
	}
	// Deserialize `Share`:
	err = decoder.Decode(&obj.Share)
	if err != nil {
		return err
	}
	return nil
}

type QuestError ag_binary.BorshEnum

const (
	QuestErrorUnexpectedQuestingState QuestError = iota
	QuestErrorInvalidInitializer
	QuestErrorIsTimelocked
	QuestErrorNumericalOverflowError
	QuestErrorIndexGreaterThanLength
	QuestErrorCannotFindUsableConfigLine
	QuestErrorUuidMustBeExactly6Length
	QuestErrorInvalidString
	QuestErrorSuspiciousTransaction
	QuestErrorInvalidMint
	QuestErrorNotEnoughXp
	QuestErrorInvalidConviction
	QuestErrorInvalidCompletion
)

func (value QuestError) String() string {
	switch value {
	case QuestErrorUnexpectedQuestingState:
		return "UnexpectedQuestingState"
	case QuestErrorInvalidInitializer:
		return "InvalidInitializer"
	case QuestErrorIsTimelocked:
		return "IsTimelocked"
	case QuestErrorNumericalOverflowError:
		return "NumericalOverflowError"
	case QuestErrorIndexGreaterThanLength:
		return "IndexGreaterThanLength"
	case QuestErrorCannotFindUsableConfigLine:
		return "CannotFindUsableConfigLine"
	case QuestErrorUuidMustBeExactly6Length:
		return "UuidMustBeExactly6Length"
	case QuestErrorInvalidString:
		return "InvalidString"
	case QuestErrorSuspiciousTransaction:
		return "SuspiciousTransaction"
	case QuestErrorInvalidMint:
		return "InvalidMint"
	case QuestErrorNotEnoughXp:
		return "NotEnoughXp"
	case QuestErrorInvalidConviction:
		return "InvalidConviction"
	case QuestErrorInvalidCompletion:
		return "InvalidCompletion"
	default:
		return ""
	}
}
