// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package questing

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type PairsConfig struct {
	Left          uint8
	LeftCreators  [5]ag_solanago.PublicKey
	Right         uint8
	RightCreators [5]ag_solanago.PublicKey
}

func (obj PairsConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Left` param:
	err = encoder.Encode(obj.Left)
	if err != nil {
		return err
	}
	// Serialize `LeftCreators` param:
	err = encoder.Encode(obj.LeftCreators)
	if err != nil {
		return err
	}
	// Serialize `Right` param:
	err = encoder.Encode(obj.Right)
	if err != nil {
		return err
	}
	// Serialize `RightCreators` param:
	err = encoder.Encode(obj.RightCreators)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PairsConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Left`:
	err = decoder.Decode(&obj.Left)
	if err != nil {
		return err
	}
	// Deserialize `LeftCreators`:
	err = decoder.Decode(&obj.LeftCreators)
	if err != nil {
		return err
	}
	// Deserialize `Right`:
	err = decoder.Decode(&obj.Right)
	if err != nil {
		return err
	}
	// Deserialize `RightCreators`:
	err = decoder.Decode(&obj.RightCreators)
	if err != nil {
		return err
	}
	return nil
}

type StakingConfig struct {
	MintAddress  ag_solanago.PublicKey
	YieldPer     uint64
	YieldPerTime uint64
}

func (obj StakingConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MintAddress` param:
	err = encoder.Encode(obj.MintAddress)
	if err != nil {
		return err
	}
	// Serialize `YieldPer` param:
	err = encoder.Encode(obj.YieldPer)
	if err != nil {
		return err
	}
	// Serialize `YieldPerTime` param:
	err = encoder.Encode(obj.YieldPerTime)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StakingConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MintAddress`:
	err = decoder.Decode(&obj.MintAddress)
	if err != nil {
		return err
	}
	// Deserialize `YieldPer`:
	err = decoder.Decode(&obj.YieldPer)
	if err != nil {
		return err
	}
	// Deserialize `YieldPerTime`:
	err = decoder.Decode(&obj.YieldPerTime)
	if err != nil {
		return err
	}
	return nil
}

type Reward struct {
	MintAddress   ag_solanago.PublicKey
	Threshold     uint8
	Amount        uint64
	AuthorityEnum uint8
	Cap           uint64
	Counter       uint64
}

func (obj Reward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MintAddress` param:
	err = encoder.Encode(obj.MintAddress)
	if err != nil {
		return err
	}
	// Serialize `Threshold` param:
	err = encoder.Encode(obj.Threshold)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `AuthorityEnum` param:
	err = encoder.Encode(obj.AuthorityEnum)
	if err != nil {
		return err
	}
	// Serialize `Cap` param:
	err = encoder.Encode(obj.Cap)
	if err != nil {
		return err
	}
	// Serialize `Counter` param:
	err = encoder.Encode(obj.Counter)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Reward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MintAddress`:
	err = decoder.Decode(&obj.MintAddress)
	if err != nil {
		return err
	}
	// Deserialize `Threshold`:
	err = decoder.Decode(&obj.Threshold)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `AuthorityEnum`:
	err = decoder.Decode(&obj.AuthorityEnum)
	if err != nil {
		return err
	}
	// Deserialize `Cap`:
	err = decoder.Decode(&obj.Cap)
	if err != nil {
		return err
	}
	// Deserialize `Counter`:
	err = decoder.Decode(&obj.Counter)
	if err != nil {
		return err
	}
	return nil
}

type Tender struct {
	MintAddress ag_solanago.PublicKey
	Amount      uint64
}

func (obj Tender) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MintAddress` param:
	err = encoder.Encode(obj.MintAddress)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Tender) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MintAddress`:
	err = decoder.Decode(&obj.MintAddress)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type Split struct {
	TokenAddress ag_solanago.PublicKey
	OpCode       uint8
	Share        uint8
}

func (obj Split) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenAddress` param:
	err = encoder.Encode(obj.TokenAddress)
	if err != nil {
		return err
	}
	// Serialize `OpCode` param:
	err = encoder.Encode(obj.OpCode)
	if err != nil {
		return err
	}
	// Serialize `Share` param:
	err = encoder.Encode(obj.Share)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Split) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenAddress`:
	err = decoder.Decode(&obj.TokenAddress)
	if err != nil {
		return err
	}
	// Deserialize `OpCode`:
	err = decoder.Decode(&obj.OpCode)
	if err != nil {
		return err
	}
	// Deserialize `Share`:
	err = decoder.Decode(&obj.Share)
	if err != nil {
		return err
	}
	return nil
}
