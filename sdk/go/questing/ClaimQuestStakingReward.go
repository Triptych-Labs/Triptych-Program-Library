// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package questing

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ClaimQuestStakingReward is the `claimQuestStakingReward` instruction.
type ClaimQuestStakingReward struct {
	QuestsBump *uint8

	// [0] = [WRITE, SIGNER] initializer
	//
	// [1] = [WRITE] quests
	//
	// [2] = [] quest
	//
	// [3] = [WRITE] questAcc
	//
	// [4] = [WRITE] rewardMint
	//
	// [5] = [WRITE] rewardTokenAccount
	//
	// [6] = [] systemProgram
	//
	// [7] = [] tokenProgram
	//
	// [8] = [] rent
	//
	// [9] = [] associatedTokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimQuestStakingRewardInstructionBuilder creates a new `ClaimQuestStakingReward` instruction builder.
func NewClaimQuestStakingRewardInstructionBuilder() *ClaimQuestStakingReward {
	nd := &ClaimQuestStakingReward{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetQuestsBump sets the "questsBump" parameter.
func (inst *ClaimQuestStakingReward) SetQuestsBump(questsBump uint8) *ClaimQuestStakingReward {
	inst.QuestsBump = &questsBump
	return inst
}

// SetInitializerAccount sets the "initializer" account.
func (inst *ClaimQuestStakingReward) SetInitializerAccount(initializer ag_solanago.PublicKey) *ClaimQuestStakingReward {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(initializer).WRITE().SIGNER()
	return inst
}

// GetInitializerAccount gets the "initializer" account.
func (inst *ClaimQuestStakingReward) GetInitializerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetQuestsAccount sets the "quests" account.
func (inst *ClaimQuestStakingReward) SetQuestsAccount(quests ag_solanago.PublicKey) *ClaimQuestStakingReward {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(quests).WRITE()
	return inst
}

// GetQuestsAccount gets the "quests" account.
func (inst *ClaimQuestStakingReward) GetQuestsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetQuestAccount sets the "quest" account.
func (inst *ClaimQuestStakingReward) SetQuestAccount(quest ag_solanago.PublicKey) *ClaimQuestStakingReward {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(quest)
	return inst
}

// GetQuestAccount gets the "quest" account.
func (inst *ClaimQuestStakingReward) GetQuestAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetQuestAccAccount sets the "questAcc" account.
func (inst *ClaimQuestStakingReward) SetQuestAccAccount(questAcc ag_solanago.PublicKey) *ClaimQuestStakingReward {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(questAcc).WRITE()
	return inst
}

// GetQuestAccAccount gets the "questAcc" account.
func (inst *ClaimQuestStakingReward) GetQuestAccAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetRewardMintAccount sets the "rewardMint" account.
func (inst *ClaimQuestStakingReward) SetRewardMintAccount(rewardMint ag_solanago.PublicKey) *ClaimQuestStakingReward {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(rewardMint).WRITE()
	return inst
}

// GetRewardMintAccount gets the "rewardMint" account.
func (inst *ClaimQuestStakingReward) GetRewardMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetRewardTokenAccountAccount sets the "rewardTokenAccount" account.
func (inst *ClaimQuestStakingReward) SetRewardTokenAccountAccount(rewardTokenAccount ag_solanago.PublicKey) *ClaimQuestStakingReward {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(rewardTokenAccount).WRITE()
	return inst
}

// GetRewardTokenAccountAccount gets the "rewardTokenAccount" account.
func (inst *ClaimQuestStakingReward) GetRewardTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ClaimQuestStakingReward) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ClaimQuestStakingReward {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ClaimQuestStakingReward) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *ClaimQuestStakingReward) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ClaimQuestStakingReward {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *ClaimQuestStakingReward) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetRentAccount sets the "rent" account.
func (inst *ClaimQuestStakingReward) SetRentAccount(rent ag_solanago.PublicKey) *ClaimQuestStakingReward {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *ClaimQuestStakingReward) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *ClaimQuestStakingReward) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *ClaimQuestStakingReward {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *ClaimQuestStakingReward) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst ClaimQuestStakingReward) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClaimQuestStakingReward,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClaimQuestStakingReward) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClaimQuestStakingReward) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.QuestsBump == nil {
			return errors.New("QuestsBump parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Initializer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Quests is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Quest is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.QuestAcc is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.RewardMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.RewardTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
	}
	return nil
}

func (inst *ClaimQuestStakingReward) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClaimQuestStakingReward")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("QuestsBump", *inst.QuestsBump))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           initializer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                quests", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                 quest", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("              questAcc", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("            rewardMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           rewardToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                  rent", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj ClaimQuestStakingReward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `QuestsBump` param:
	err = encoder.Encode(obj.QuestsBump)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ClaimQuestStakingReward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `QuestsBump`:
	err = decoder.Decode(&obj.QuestsBump)
	if err != nil {
		return err
	}
	return nil
}

// NewClaimQuestStakingRewardInstruction declares a new ClaimQuestStakingReward instruction with the provided parameters and accounts.
func NewClaimQuestStakingRewardInstruction(
	// Parameters:
	questsBump uint8,
	// Accounts:
	initializer ag_solanago.PublicKey,
	quests ag_solanago.PublicKey,
	quest ag_solanago.PublicKey,
	questAcc ag_solanago.PublicKey,
	rewardMint ag_solanago.PublicKey,
	rewardTokenAccount ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey) *ClaimQuestStakingReward {
	return NewClaimQuestStakingRewardInstructionBuilder().
		SetQuestsBump(questsBump).
		SetInitializerAccount(initializer).
		SetQuestsAccount(quests).
		SetQuestAccount(quest).
		SetQuestAccAccount(questAcc).
		SetRewardMintAccount(rewardMint).
		SetRewardTokenAccountAccount(rewardTokenAccount).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetRentAccount(rent).
		SetAssociatedTokenProgramAccount(associatedTokenProgram)
}
