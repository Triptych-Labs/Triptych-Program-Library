// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package questing

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AmmendQuestWithEntitlement is the `ammendQuestWithEntitlement` instruction.
type AmmendQuestWithEntitlement struct {
	QuestIndex  *uint64
	QuestBump   *uint8
	Entitlement *Reward

	// [0] = [WRITE] ballzMint
	//
	// [1] = [WRITE, SIGNER] oracle
	//
	// [2] = [WRITE] quest
	//
	// [3] = [WRITE] entitlementTokenAccount
	//
	// [4] = [] systemProgram
	//
	// [5] = [] tokenProgram
	//
	// [6] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAmmendQuestWithEntitlementInstructionBuilder creates a new `AmmendQuestWithEntitlement` instruction builder.
func NewAmmendQuestWithEntitlementInstructionBuilder() *AmmendQuestWithEntitlement {
	nd := &AmmendQuestWithEntitlement{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetQuestIndex sets the "questIndex" parameter.
func (inst *AmmendQuestWithEntitlement) SetQuestIndex(questIndex uint64) *AmmendQuestWithEntitlement {
	inst.QuestIndex = &questIndex
	return inst
}

// SetQuestBump sets the "questBump" parameter.
func (inst *AmmendQuestWithEntitlement) SetQuestBump(questBump uint8) *AmmendQuestWithEntitlement {
	inst.QuestBump = &questBump
	return inst
}

// SetEntitlement sets the "entitlement" parameter.
func (inst *AmmendQuestWithEntitlement) SetEntitlement(entitlement Reward) *AmmendQuestWithEntitlement {
	inst.Entitlement = &entitlement
	return inst
}

// SetBallzMintAccount sets the "ballzMint" account.
func (inst *AmmendQuestWithEntitlement) SetBallzMintAccount(ballzMint ag_solanago.PublicKey) *AmmendQuestWithEntitlement {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(ballzMint).WRITE()
	return inst
}

// GetBallzMintAccount gets the "ballzMint" account.
func (inst *AmmendQuestWithEntitlement) GetBallzMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOracleAccount sets the "oracle" account.
func (inst *AmmendQuestWithEntitlement) SetOracleAccount(oracle ag_solanago.PublicKey) *AmmendQuestWithEntitlement {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(oracle).WRITE().SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *AmmendQuestWithEntitlement) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetQuestAccount sets the "quest" account.
func (inst *AmmendQuestWithEntitlement) SetQuestAccount(quest ag_solanago.PublicKey) *AmmendQuestWithEntitlement {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(quest).WRITE()
	return inst
}

// GetQuestAccount gets the "quest" account.
func (inst *AmmendQuestWithEntitlement) GetQuestAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEntitlementTokenAccountAccount sets the "entitlementTokenAccount" account.
func (inst *AmmendQuestWithEntitlement) SetEntitlementTokenAccountAccount(entitlementTokenAccount ag_solanago.PublicKey) *AmmendQuestWithEntitlement {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(entitlementTokenAccount).WRITE()
	return inst
}

// GetEntitlementTokenAccountAccount gets the "entitlementTokenAccount" account.
func (inst *AmmendQuestWithEntitlement) GetEntitlementTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AmmendQuestWithEntitlement) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AmmendQuestWithEntitlement {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AmmendQuestWithEntitlement) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *AmmendQuestWithEntitlement) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *AmmendQuestWithEntitlement {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *AmmendQuestWithEntitlement) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetRentAccount sets the "rent" account.
func (inst *AmmendQuestWithEntitlement) SetRentAccount(rent ag_solanago.PublicKey) *AmmendQuestWithEntitlement {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *AmmendQuestWithEntitlement) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst AmmendQuestWithEntitlement) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AmmendQuestWithEntitlement,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AmmendQuestWithEntitlement) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AmmendQuestWithEntitlement) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.QuestIndex == nil {
			return errors.New("QuestIndex parameter is not set")
		}
		if inst.QuestBump == nil {
			return errors.New("QuestBump parameter is not set")
		}
		if inst.Entitlement == nil {
			return errors.New("Entitlement parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.BallzMint is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Quest is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EntitlementTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *AmmendQuestWithEntitlement) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AmmendQuestWithEntitlement")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" QuestIndex", *inst.QuestIndex))
						paramsBranch.Child(ag_format.Param("  QuestBump", *inst.QuestBump))
						paramsBranch.Child(ag_format.Param("Entitlement", *inst.Entitlement))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       ballzMint", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          oracle", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           quest", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("entitlementToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   systemProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            rent", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj AmmendQuestWithEntitlement) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `QuestIndex` param:
	err = encoder.Encode(obj.QuestIndex)
	if err != nil {
		return err
	}
	// Serialize `QuestBump` param:
	err = encoder.Encode(obj.QuestBump)
	if err != nil {
		return err
	}
	// Serialize `Entitlement` param:
	err = encoder.Encode(obj.Entitlement)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AmmendQuestWithEntitlement) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `QuestIndex`:
	err = decoder.Decode(&obj.QuestIndex)
	if err != nil {
		return err
	}
	// Deserialize `QuestBump`:
	err = decoder.Decode(&obj.QuestBump)
	if err != nil {
		return err
	}
	// Deserialize `Entitlement`:
	err = decoder.Decode(&obj.Entitlement)
	if err != nil {
		return err
	}
	return nil
}

// NewAmmendQuestWithEntitlementInstruction declares a new AmmendQuestWithEntitlement instruction with the provided parameters and accounts.
func NewAmmendQuestWithEntitlementInstruction(
	// Parameters:
	questIndex uint64,
	questBump uint8,
	entitlement Reward,
	// Accounts:
	ballzMint ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	quest ag_solanago.PublicKey,
	entitlementTokenAccount ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *AmmendQuestWithEntitlement {
	return NewAmmendQuestWithEntitlementInstructionBuilder().
		SetQuestIndex(questIndex).
		SetQuestBump(questBump).
		SetEntitlement(entitlement).
		SetBallzMintAccount(ballzMint).
		SetOracleAccount(oracle).
		SetQuestAccount(quest).
		SetEntitlementTokenAccountAccount(entitlementTokenAccount).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetRentAccount(rent)
}
