// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package questing

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ProposeQuestRecord is the `proposeQuestRecord` instruction.
type ProposeQuestRecord struct {
	DepositingLeft  *[]ag_solanago.PublicKey
	DepositingRight *[]ag_solanago.PublicKey

	// [0] = [WRITE, SIGNER] initializer
	//
	// [1] = [WRITE] questProposal
	//
	// [2] = [] quest
	//
	// [3] = [WRITE] questRecorder
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewProposeQuestRecordInstructionBuilder creates a new `ProposeQuestRecord` instruction builder.
func NewProposeQuestRecordInstructionBuilder() *ProposeQuestRecord {
	nd := &ProposeQuestRecord{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetDepositingLeft sets the "depositingLeft" parameter.
func (inst *ProposeQuestRecord) SetDepositingLeft(depositingLeft []ag_solanago.PublicKey) *ProposeQuestRecord {
	inst.DepositingLeft = &depositingLeft
	return inst
}

// SetDepositingRight sets the "depositingRight" parameter.
func (inst *ProposeQuestRecord) SetDepositingRight(depositingRight []ag_solanago.PublicKey) *ProposeQuestRecord {
	inst.DepositingRight = &depositingRight
	return inst
}

// SetInitializerAccount sets the "initializer" account.
func (inst *ProposeQuestRecord) SetInitializerAccount(initializer ag_solanago.PublicKey) *ProposeQuestRecord {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(initializer).WRITE().SIGNER()
	return inst
}

// GetInitializerAccount gets the "initializer" account.
func (inst *ProposeQuestRecord) GetInitializerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetQuestProposalAccount sets the "questProposal" account.
func (inst *ProposeQuestRecord) SetQuestProposalAccount(questProposal ag_solanago.PublicKey) *ProposeQuestRecord {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(questProposal).WRITE()
	return inst
}

// GetQuestProposalAccount gets the "questProposal" account.
func (inst *ProposeQuestRecord) GetQuestProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetQuestAccount sets the "quest" account.
func (inst *ProposeQuestRecord) SetQuestAccount(quest ag_solanago.PublicKey) *ProposeQuestRecord {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(quest)
	return inst
}

// GetQuestAccount gets the "quest" account.
func (inst *ProposeQuestRecord) GetQuestAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetQuestRecorderAccount sets the "questRecorder" account.
func (inst *ProposeQuestRecord) SetQuestRecorderAccount(questRecorder ag_solanago.PublicKey) *ProposeQuestRecord {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(questRecorder).WRITE()
	return inst
}

// GetQuestRecorderAccount gets the "questRecorder" account.
func (inst *ProposeQuestRecord) GetQuestRecorderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ProposeQuestRecord) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ProposeQuestRecord {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ProposeQuestRecord) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst ProposeQuestRecord) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ProposeQuestRecord,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ProposeQuestRecord) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ProposeQuestRecord) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.DepositingLeft == nil {
			return errors.New("DepositingLeft parameter is not set")
		}
		if inst.DepositingRight == nil {
			return errors.New("DepositingRight parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Initializer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.QuestProposal is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Quest is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.QuestRecorder is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *ProposeQuestRecord) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ProposeQuestRecord")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" DepositingLeft", *inst.DepositingLeft))
						paramsBranch.Child(ag_format.Param("DepositingRight", *inst.DepositingRight))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  initializer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("questProposal", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        quest", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("questRecorder", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj ProposeQuestRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DepositingLeft` param:
	err = encoder.Encode(obj.DepositingLeft)
	if err != nil {
		return err
	}
	// Serialize `DepositingRight` param:
	err = encoder.Encode(obj.DepositingRight)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ProposeQuestRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DepositingLeft`:
	err = decoder.Decode(&obj.DepositingLeft)
	if err != nil {
		return err
	}
	// Deserialize `DepositingRight`:
	err = decoder.Decode(&obj.DepositingRight)
	if err != nil {
		return err
	}
	return nil
}

// NewProposeQuestRecordInstruction declares a new ProposeQuestRecord instruction with the provided parameters and accounts.
func NewProposeQuestRecordInstruction(
	// Parameters:
	depositingLeft []ag_solanago.PublicKey,
	depositingRight []ag_solanago.PublicKey,
	// Accounts:
	initializer ag_solanago.PublicKey,
	questProposal ag_solanago.PublicKey,
	quest ag_solanago.PublicKey,
	questRecorder ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *ProposeQuestRecord {
	return NewProposeQuestRecordInstructionBuilder().
		SetDepositingLeft(depositingLeft).
		SetDepositingRight(depositingRight).
		SetInitializerAccount(initializer).
		SetQuestProposalAccount(questProposal).
		SetQuestAccount(quest).
		SetQuestRecorderAccount(questRecorder).
		SetSystemProgramAccount(systemProgram)
}
