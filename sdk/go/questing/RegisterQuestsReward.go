// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package questing

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RegisterQuestsReward is the `registerQuestsReward` instruction.
type RegisterQuestsReward struct {
	QuestsBump *uint8
	Name       *string
	Symbol     *string
	Uri        *string

	// [0] = [WRITE, SIGNER] oracle
	//
	// [1] = [WRITE] quests
	//
	// [2] = [WRITE, SIGNER] rewardMint
	//
	// [3] = [] systemProgram
	//
	// [4] = [] tokenProgram
	//
	// [5] = [] rent
	//
	// [6] = [] mplMetadataProgram
	//
	// [7] = [WRITE] metadataAccount
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRegisterQuestsRewardInstructionBuilder creates a new `RegisterQuestsReward` instruction builder.
func NewRegisterQuestsRewardInstructionBuilder() *RegisterQuestsReward {
	nd := &RegisterQuestsReward{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetQuestsBump sets the "questsBump" parameter.
func (inst *RegisterQuestsReward) SetQuestsBump(questsBump uint8) *RegisterQuestsReward {
	inst.QuestsBump = &questsBump
	return inst
}

// SetName sets the "name" parameter.
func (inst *RegisterQuestsReward) SetName(name string) *RegisterQuestsReward {
	inst.Name = &name
	return inst
}

// SetSymbol sets the "symbol" parameter.
func (inst *RegisterQuestsReward) SetSymbol(symbol string) *RegisterQuestsReward {
	inst.Symbol = &symbol
	return inst
}

// SetUri sets the "uri" parameter.
func (inst *RegisterQuestsReward) SetUri(uri string) *RegisterQuestsReward {
	inst.Uri = &uri
	return inst
}

// SetOracleAccount sets the "oracle" account.
func (inst *RegisterQuestsReward) SetOracleAccount(oracle ag_solanago.PublicKey) *RegisterQuestsReward {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracle).WRITE().SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *RegisterQuestsReward) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetQuestsAccount sets the "quests" account.
func (inst *RegisterQuestsReward) SetQuestsAccount(quests ag_solanago.PublicKey) *RegisterQuestsReward {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(quests).WRITE()
	return inst
}

// GetQuestsAccount gets the "quests" account.
func (inst *RegisterQuestsReward) GetQuestsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRewardMintAccount sets the "rewardMint" account.
func (inst *RegisterQuestsReward) SetRewardMintAccount(rewardMint ag_solanago.PublicKey) *RegisterQuestsReward {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(rewardMint).WRITE().SIGNER()
	return inst
}

// GetRewardMintAccount gets the "rewardMint" account.
func (inst *RegisterQuestsReward) GetRewardMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *RegisterQuestsReward) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *RegisterQuestsReward {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *RegisterQuestsReward) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *RegisterQuestsReward) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RegisterQuestsReward {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *RegisterQuestsReward) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetRentAccount sets the "rent" account.
func (inst *RegisterQuestsReward) SetRentAccount(rent ag_solanago.PublicKey) *RegisterQuestsReward {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *RegisterQuestsReward) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMplMetadataProgramAccount sets the "mplMetadataProgram" account.
func (inst *RegisterQuestsReward) SetMplMetadataProgramAccount(mplMetadataProgram ag_solanago.PublicKey) *RegisterQuestsReward {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(mplMetadataProgram)
	return inst
}

// GetMplMetadataProgramAccount gets the "mplMetadataProgram" account.
func (inst *RegisterQuestsReward) GetMplMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetMetadataAccountAccount sets the "metadataAccount" account.
func (inst *RegisterQuestsReward) SetMetadataAccountAccount(metadataAccount ag_solanago.PublicKey) *RegisterQuestsReward {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(metadataAccount).WRITE()
	return inst
}

// GetMetadataAccountAccount gets the "metadataAccount" account.
func (inst *RegisterQuestsReward) GetMetadataAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst RegisterQuestsReward) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RegisterQuestsReward,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RegisterQuestsReward) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RegisterQuestsReward) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.QuestsBump == nil {
			return errors.New("QuestsBump parameter is not set")
		}
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
		if inst.Symbol == nil {
			return errors.New("Symbol parameter is not set")
		}
		if inst.Uri == nil {
			return errors.New("Uri parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Quests is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RewardMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.MplMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.MetadataAccount is not set")
		}
	}
	return nil
}

func (inst *RegisterQuestsReward) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RegisterQuestsReward")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("QuestsBump", *inst.QuestsBump))
						paramsBranch.Child(ag_format.Param("      Name", *inst.Name))
						paramsBranch.Child(ag_format.Param("    Symbol", *inst.Symbol))
						paramsBranch.Child(ag_format.Param("       Uri", *inst.Uri))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            oracle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            quests", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        rewardMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     systemProgram", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      tokenProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("              rent", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("mplMetadataProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          metadata", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj RegisterQuestsReward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `QuestsBump` param:
	err = encoder.Encode(obj.QuestsBump)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Symbol` param:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	return nil
}
func (obj *RegisterQuestsReward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `QuestsBump`:
	err = decoder.Decode(&obj.QuestsBump)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	return nil
}

// NewRegisterQuestsRewardInstruction declares a new RegisterQuestsReward instruction with the provided parameters and accounts.
func NewRegisterQuestsRewardInstruction(
	// Parameters:
	questsBump uint8,
	name string,
	symbol string,
	uri string,
	// Accounts:
	oracle ag_solanago.PublicKey,
	quests ag_solanago.PublicKey,
	rewardMint ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	mplMetadataProgram ag_solanago.PublicKey,
	metadataAccount ag_solanago.PublicKey) *RegisterQuestsReward {
	return NewRegisterQuestsRewardInstructionBuilder().
		SetQuestsBump(questsBump).
		SetName(name).
		SetSymbol(symbol).
		SetUri(uri).
		SetOracleAccount(oracle).
		SetQuestsAccount(quests).
		SetRewardMintAccount(rewardMint).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetRentAccount(rent).
		SetMplMetadataProgramAccount(mplMetadataProgram).
		SetMetadataAccountAccount(metadataAccount)
}
