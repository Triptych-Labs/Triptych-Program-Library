// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package flipper

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawHouse is the `withdrawHouse` instruction.
type WithdrawHouse struct {
	HouseBump *uint8
	Amount    *uint64

	// [0] = [WRITE, SIGNER] oracle
	//
	// [1] = [WRITE] house
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawHouseInstructionBuilder creates a new `WithdrawHouse` instruction builder.
func NewWithdrawHouseInstructionBuilder() *WithdrawHouse {
	nd := &WithdrawHouse{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetHouseBump sets the "houseBump" parameter.
func (inst *WithdrawHouse) SetHouseBump(houseBump uint8) *WithdrawHouse {
	inst.HouseBump = &houseBump
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *WithdrawHouse) SetAmount(amount uint64) *WithdrawHouse {
	inst.Amount = &amount
	return inst
}

// SetOracleAccount sets the "oracle" account.
func (inst *WithdrawHouse) SetOracleAccount(oracle ag_solanago.PublicKey) *WithdrawHouse {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracle).WRITE().SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *WithdrawHouse) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetHouseAccount sets the "house" account.
func (inst *WithdrawHouse) SetHouseAccount(house ag_solanago.PublicKey) *WithdrawHouse {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(house).WRITE()
	return inst
}

// GetHouseAccount gets the "house" account.
func (inst *WithdrawHouse) GetHouseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst WithdrawHouse) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawHouse,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawHouse) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawHouse) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.HouseBump == nil {
			return errors.New("HouseBump parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.House is not set")
		}
	}
	return nil
}

func (inst *WithdrawHouse) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawHouse")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("HouseBump", *inst.HouseBump))
						paramsBranch.Child(ag_format.Param("   Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("oracle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" house", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj WithdrawHouse) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `HouseBump` param:
	err = encoder.Encode(obj.HouseBump)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WithdrawHouse) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `HouseBump`:
	err = decoder.Decode(&obj.HouseBump)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawHouseInstruction declares a new WithdrawHouse instruction with the provided parameters and accounts.
func NewWithdrawHouseInstruction(
	// Parameters:
	houseBump uint8,
	amount uint64,
	// Accounts:
	oracle ag_solanago.PublicKey,
	house ag_solanago.PublicKey) *WithdrawHouse {
	return NewWithdrawHouseInstructionBuilder().
		SetHouseBump(houseBump).
		SetAmount(amount).
		SetOracleAccount(oracle).
		SetHouseAccount(house)
}
